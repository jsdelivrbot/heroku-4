<!DOCTYPE html>
<head>
  <link rel="stylesheet" href="https://unpkg.com/tachyons@4.7.0/css/tachyons.min.css"/>
  <link href="https://fonts.googleapis.com/css?family=Mada" rel="stylesheet">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.10.0/styles/default.min.css">
  <script src="https://unpkg.com/vue@2.2.6/dist/vue.min.js"></script>
  <meta property="og:title" content="Visualizing Rosenblatt perceptron training" />
  <meta property="og:url" content="https://rosenblattperceptron.herokuapp.com/" />
  <meta property="og:image" content="https://rosenblattperceptron.herokuapp.com/media/perceptron.png" />
</head>
<body>
<div>
</div>
<a href="https://github.com/elyx0/rosenblattperceptron"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/52760788cde945287fbb584134c4cbc2bc36f904/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f77686974655f6666666666662e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png"></a>
<div>
  <header class="tc ph4">
    <h1 class="f3 f2-m f1-l fw2 black-90 mv3">
      Visualizing Rosenblatt perceptron training
    </h1>
    <h2 class="f5 f4-m f3-l fw2 black-50 mt0 lh-copy">
      Training of a <a target="_blank" href="https://en.wikipedia.org/wiki/Perceptron#Learning_algorithm">single layer feed forward binary classifier</a> using the Heaviside step function
    </h2>
  </header>

  <section id="app" v-cloak class="cf  bt b--black-10 black-70 bg-white">
    <div class="fl w-100 pa3">
        <svg id="mainsvg" viewbox="0 0 400 400">
          <!-- xaxis -->
          <g targetVal="targetVal" class="xaxis">
            <text x="-18" y="18">0</text>
            <line x1="0" y1="1" v-bind="{'x2': lineWidth}"  y2="1" />
            <g v-for="(n,index) in axisValues">
              <line y1="0" y2="7" v-bind="{'x1': index*10, 'x2': index*10}" />
              <text v-if="index != 0 && index % 5 === 0" v-bind="{'x': (n == 1) ? ((index-1)*10)+5 : ((index-1)*10)-5, 'y':20}">{{ (n == 0 || n == 1) ? n : n.toFixed(1) }}</text>
            </g>
          </g>
          <!-- yaxis -->
          <g targetVal="targetVal" class="yaxis">
            <line x1="0" y1="1" v-bind="{'x2': lineWidth}"  y2="1" />
            <g v-for="(n,index) in yaxisValues">
              <line y1="0" y2="7" v-bind="{'x1': index*10, 'x2': index*10}" />
              <text v-if="index != axisValues.length-1 && index % 5 === 0" v-bind="{'x': (n == 0 || n == 1) ? ((index-1)*10)+5 : ((index-1)*10)-5, 'y':20}">{{ (n == 0 || n == 1) ? n : n.toFixed(1) }}</text>
            </g>
          </g>
          <!-- Points -->
          <g class="points">
            <g v-for="(point,index) in normalizedSet" v-bind:class="'point ' + (!!point.reveal ? 'reveal' :'hide') ">
              <circle v-bind="{'r':point.r,'cx':point.x1*lineWidth,'cy':-point.x2*lineWidth,'style': 'fill:' + (point.cat ? '#00cc00' : '#cc0000')}"/>
              <text font-size="12" v-bind="{'x':(point.x1 > .8 ? (point.x1*lineWidth - (point.name.length * 7)): point.x1*lineWidth + 10),'y':-point.x2*lineWidth + 3}">{{ point.name }}<text>
            </g>

            <g v-for="(point,index) in predictedSet" v-bind:class="'point predicted ' + (!!point.reveal ? 'reveal' :'hide') ">
              <circle v-bind="{'r':point.r,'cx':point.x1*lineWidth,'cy':-point.x2*lineWidth,'style': 'fill:' + (point.cat ? '#00cc00' : '#cc0000')}"/>
              <text font-size="12" v-bind="{'x': (point.x1 > .8 ? (point.x1*lineWidth - (point.name.length * 7)): point.x1*lineWidth + 10),'y':-point.x2*lineWidth + 3}">{{ point.name }}<text>
            </g>
          </g>
          <g v-if="showLine" class='linear'>
            <line v-bind="{'x1': lineCoords.x1*lineWidth,'y1': lineCoords.y1*lineWidth,'x2': lineCoords.x2*lineWidth,'y2': lineCoords.y2*lineWidth}" />
          </g>
      </svg>
    </div>
    <div class="fl w-100">



<article v-if="trained" class="trained bt b--black-10 bg-washed-blue black-70 ph3 pv4">
  <div class="dt-ns dt--fixed-ns w-100">
    <div class="pa3 pa4-ns dtc-ns v-mid">
      <div>
        <h2 class="fw4 blue mt0 mb3">Our Perceptron is trained! </h2>
        <p class="black-70 tc lh-copy mv0">
          <p v-if="predictedSet.length == 0"> It is important to notice that it will converge to any solution that satisfies the training set.
          Try to retrain to see if it changes.<br /><br />
          Now we can use it to categorize samples it's never seen.<br /><br />
        </p>
         <p v-else>According to the perceptron, something with <i>{{ ~~(predictedSet[predictedSet.length-1].x1 * maxX) }}</i> teeth and <i>{{ ~~(predictedSet[predictedSet.length-1].x2 * maxY) }}</i>cm looks <i>{{ predictedSet[predictedSet.length-1].cat ? 'nice' : 'NOT nice' }}</i></p>
          {{predictedSet.length ? "But w" :"W"}}ould something with: <i>{{ ~~(randomValue[0]*maxX) }}</i>teeth and a size of   <i>{{ ~~(randomValue[1]*maxY) }}</i> cm, likely to be <i>nice</i>?
          <pre><code>p.predict({{ randomValue }})</code></pre>
        </p>
      </div>
    </div>
    <div class="pa3 pa4-ns dtc-ns v-mid">
      <a v-on:click="predictValue" class="no-underline f6 tc db w-100 pv3 bg-animate bg-blue hover-bg-dark-blue white br2">Predict</a>
      <a v-on:click="trainPerceptron" class="no-underline f6 tc db w-100 mt5 pv3 bg-animate bg-mid-gray hover-bg-dark-blue white br2">Retrain</a>
    </div>
  </div>
</article>
<article v-if="!isTraining && !trained" class="bt b--black-10 bg-washed-blue black-70 ph3 pv4">
  <div class="dt-ns dt--fixed-ns w-100">
    <div class="pa3 pa4-ns dtc-ns v-mid">
      <div>
        <h2 class="fw4 blue mt0 mb3">Training the Perceptron </h2>
        <p class="black-70 tc lh-copy mv0">
          We feed it a suite of (hypothetical) inputs and outputs according to this table<em>*</em> :
          <div class="pa4">
  <div class="overflow-auto">
    <table class="f6 w-100 mw8 center" cellspacing="0">
      <thead>
        <tr class="stripe-dark">
          <th class="fw6 tl pa3 bg-white">Entity</th>
          <th class="fw6 tl pa3 bg-white">Teeth</th>
          <th class="fw6 tl pa3 bg-white">Size (cm)</th>
          <th class="fw6 tl pa3 bg-white">Friendly</th>
        </tr>
      </thead>
      <tbody class="lh-copy">
        <tr v-for="item in trainingSet" class="stripe-dark">
          <td class="pa3">{{item.name}}</td>
          <td class="pa3">{{item.x1}}</td>
          <td class="pa3">{{item.x2}}</td>
          <td class="pa3">{{item.cat ? 'yes' : 'no'}}</td>
        </tr>
      </tbody>
    </table>
    <em class='shh'>* I know it's not accurate but it's for the sake of the demonstration.</em>
  </div>
</div>
  <p class="black-70 tc lh-copy mv0">We normalize our values between <i>[0;1]</i> before sending them through training:</p>

          <pre><code>
const p = new Perceptron();
{{ code }}
p.learn(updateGraph);
          </code></pre>
        </p>
          <p class="black-70 tc lh-copy mv0">The perceptron will try to find a linear separation between the <i class="positive">positive</i> and <i class="negative">negative</i> examples</p>
      </div>
    </div>
  </div>
  <a href='#' v-on:click="trainPerceptron" class="no-underline f6 tc db w-100 pv3 bg-animate bg-blue hover-bg-dark-blue white br2">Train</a>
</article>


    </div>
  </section>
</div>
<footer class="bt b--black-10 pv4 ph3 ph5-ns tc">
  <a class="link dim gray dib h2 w2 br-100 mr3 pa2 bg-near-white ba b--black-10" href="https://twitter.com/Elyx0" title="">
    <svg data-icon="twitter" viewBox="0 0 32 32" style="fill:currentcolor">
      <title>twitter icon</title>
      <path d="M2 4 C6 8 10 12 15 11 A6 6 0 0 1 22 4 A6 6 0 0 1 26 6 A8 8 0 0 0 31 4 A8 8 0 0 1 28 8 A8 8 0 0 0 32 7 A8 8 0 0 1 28 11 A18 18 0 0 1 10 30 A18 18 0 0 1 0 27 A12 12 0 0 0 8 24 A8 8 0 0 1 3 20 A8 8 0 0 0 6 19.5 A8 8 0 0 1 0 12 A8 8 0 0 0 3 13 A8 8 0 0 1 2 4"></path>
    </svg>
  </a>
  <a class="link dim gray dib br-100 h2 w2 mr3 pa2 bg-near-white ba b--black-10" href="https://github.com/elyx0/rosenblattperceptronjs" title="">
    <svg data-icon="github" viewBox="0 0 32 32" style="fill:currentcolor">
      <title>github icon</title>
      <path d="M0 18 C0 12 3 10 3 9 C2.5 7 2.5 4 3 3 C6 3 9 5 10 6 C12 5 14 5 16 5 C18 5 20 5 22 6 C23 5 26 3 29 3 C29.5 4 29.5 7 29 9 C29 10 32 12 32 18 C32 25 30 30 16 30 C2 30 0 25 0 18 M3 20 C3 24 4 28 16 28 C28 28 29 24 29 20 C29 16 28 14 16 14 C4 14 3 16 3 20 M8 21 A1.5 2.5 0 0 0 13 21 A1.5 2.5 0 0 0 8 21 M24 21 A1.5 2.5 0 0 0 19 21 A1.5 2.5 0 0 0 24 21 z"></path>
    </svg>
  </a>
</footer>
<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.10.0/highlight.min.js"></script>
</body>
</html>
